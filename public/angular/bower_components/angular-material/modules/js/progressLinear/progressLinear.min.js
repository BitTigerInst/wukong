/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v1.0.5-master-f171fd2
 */
!function(e,a,r){"use strict";function t(e,t,n){function i(e,a,r){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),d}function d(i,d,u){function v(){u.$observe("value",function(e){var a=s(e);d.attr("aria-valuenow",a),b()!=l&&g(w,a)}),u.$observe("mdBufferValue",function(e){g(p,s(e))}),u.$observe("mdMode",function(e){switch(e){case l:case c:case m:case o:$.removeClass("ng-hide "+h),$.addClass(h="_md-mode-"+e);break;default:h&&$.removeClass(h),$.addClass("ng-hide"),h=r}})}function f(){if(a.isUndefined(u.mdMode)){var e=a.isDefined(u.value),r=e?m:o,i="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";n.debug(t.supplant(i,[r])),d.attr("md-mode",r),u.mdMode=r}}function b(){var e=(u.mdMode||"").trim();if(e)switch(e){case m:case o:case c:case l:break;default:e=r}return e}function g(e,r){if(b()){var n=t.supplant("translateX({0}%) scale({1},1)",[(r-100)/2,r/100]),i=_({transform:n});a.element(e).css(i)}}e(d);var h,_=t.dom.animator.toCss,p=a.element(d[0].querySelector("._md-bar1")),w=a.element(d[0].querySelector("._md-bar2")),$=a.element(d[0].querySelector("._md-container"));d.attr("md-mode",b()),f(),v()}function s(e){return Math.max(0,Math.min(e||0,100))}var m="determinate",o="indeterminate",c="buffer",l="query";return{restrict:"E",template:'<div class="_md-container"><div class="_md-dashed"></div><div class="_md-bar _md-bar1"></div><div class="_md-bar _md-bar2"></div></div>',compile:i}}a.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",t),t.$inject=["$mdTheming","$mdUtil","$log"]}(window,window.angular);